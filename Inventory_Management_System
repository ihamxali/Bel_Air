import React, { useState } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, LineChart, Line, ResponsiveContainer } from 'recharts';
import { Package, AlertTriangle, TrendingDown, ShoppingCart, RefreshCw } from 'lucide-react';

const InventoryManagement = () => {
  const [inventoryData, setInventoryData] = useState([
    {
      id: 1,
      item: 'Basmati Rice',
      currentStock: 15,
      minThreshold: 20,
      maxCapacity: 100,
      unit: 'kg',
      costPerUnit: 2.50,
      supplier: 'Delhi Spices, BesanÃ§on',
      lastOrdered: '2024-05-20',
      avgWeeklyUsage: 12
    },
    {
      id: 2,
      item: 'Chicken Breast',
      currentStock: 8,
      minThreshold: 15,
      maxCapacity: 50,
      unit: 'kg',
      costPerUnit: 8.90,
      supplier: 'Eco Market, BesanÃ§on',
      lastOrdered: '2024-05-25',
      avgWeeklyUsage: 18
    },
    {
      id: 3,
      item: 'Tomatoes',
      currentStock: 25,
      minThreshold: 10,
      maxCapacity: 40,
      unit: 'kg',
      costPerUnit: 3.20,
      supplier: 'Metro, BesanÃ§on',
      lastOrdered: '2024-05-28',
      avgWeeklyUsage: 8
    },
    {
      id: 4,
      item: 'Garam Masala',
      currentStock: 2,
      minThreshold: 5,
      maxCapacity: 20,
      unit: 'kg',
      costPerUnit: 15.00,
      supplier: 'Delhi Spices, BesanÃ§on',
      lastOrdered: '2024-05-15',
      avgWeeklyUsage: 1.5
    },
    {
      id: 5,
      item: 'Naan Mix',
      currentStock: 35,
      minThreshold: 20,
      maxCapacity: 60,
      unit: 'kg',
      costPerUnit: 4.50,
      supplier: 'Bread Supplies Inc',
      lastOrdered: '2024-05-27',
      avgWeeklyUsage: 15
    },
    {
      id: 6,
      item: 'Yogurt',
      currentStock: 12,
      minThreshold: 15,
      maxCapacity: 30,
      unit: 'kg',
      costPerUnit: 2.80,
      supplier: 'Metro, BesanÃ§on',
      lastOrdered: '2024-05-26',
      avgWeeklyUsage: 6
    }
  ]);

  const usageHistory = [
    { week: 'Week 1', rice: 14, chicken: 20, tomatoes: 9, masala: 1.8, naan: 16, yogurt: 7 },
    { week: 'Week 2', rice: 12, chicken: 18, tomatoes: 8, masala: 1.2, naan: 14, yogurt: 5 },
    { week: 'Week 3', rice: 13, chicken: 17, tomatoes: 7, masala: 1.6, naan: 15, yogurt: 6 },
    { week: 'Week 4', rice: 11, chicken: 19, tomatoes: 8, masala: 1.4, naan: 15, yogurt: 6 }
  ];

  const [selectedItem, setSelectedItem] = useState(null);
  const [showReorderModal, setShowReorderModal] = useState(false);
  const [reorderQuantity, setReorderQuantity] = useState('');

  // Calculate stock status and predictions
  const getStockStatus = (item) => {
    const stockRatio = item.currentStock / item.maxCapacity;
    
    if (item.currentStock <= item.minThreshold * 0.5) return 'critical';
    if (item.currentStock <= item.minThreshold) return 'low';
    if (stockRatio > 0.8) return 'overstocked';
    return 'good';
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'critical': return 'bg-red-100 text-red-800 border-red-200';
      case 'low': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'overstocked': return 'bg-purple-100 text-purple-800 border-purple-200';
      case 'good': return 'bg-green-100 text-green-800 border-green-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const criticalItems = inventoryData.filter(item => getStockStatus(item) === 'critical');
  const lowStockItems = inventoryData.filter(item => getStockStatus(item) === 'low');
  const totalValue = inventoryData.reduce((sum, item) => sum + (item.currentStock * item.costPerUnit), 0);

  const generateReorderSuggestion = (item) => {
    const suggestedOrder = Math.max(item.minThreshold * 2, item.avgWeeklyUsage * 4);
    return Math.min(suggestedOrder, item.maxCapacity - item.currentStock);
  };

  const handleReorder = (item) => {
    setSelectedItem(item);
    setReorderQuantity(generateReorderSuggestion(item).toString());
    setShowReorderModal(true);
  };

  const processReorder = () => {
    if (selectedItem && reorderQuantity) {
      const updatedInventory = inventoryData.map(item => 
        item.id === selectedItem.id 
          ? { ...item, currentStock: item.currentStock + parseInt(reorderQuantity), lastOrdered: new Date().toISOString().split('T')[0] }
          : item
      );
      setInventoryData(updatedInventory);
      setShowReorderModal(false);
      setSelectedItem(null);
      setReorderQuantity('');
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-2">ðŸ“¦ Smart Inventory Management</h1>
          <p className="text-gray-600">Bel Air Tandoori - Real-time Stock Control & Forecasting</p>
        </div>

        {/* Alert Section */}
        {(criticalItems.length > 0 || lowStockItems.length > 0) && (
          <div className="mb-8">
            {criticalItems.length > 0 && (
              <div className="bg-red-50 border-l-4 border-red-400 p-4 mb-4 rounded-r-lg">
                <div className="flex items-center">
                  <AlertTriangle className="h-5 w-5 text-red-400 mr-2" />
                  <p className="text-red-700 font-semibold">Critical Stock Alert!</p>
                </div>
                <p className="text-red-600 mt-1">
                  {criticalItems.map(item => item.item).join(', ')} need immediate reordering
                </p>
              </div>
            )}
            {lowStockItems.length > 0 && (
              <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 rounded-r-lg">
                <div className="flex items-center">
                  <AlertTriangle className="h-5 w-5 text-yellow-400 mr-2" />
                  <p className="text-yellow-700 font-semibold">Low Stock Warning</p>
                </div>
                <p className="text-yellow-600 mt-1">
                  {lowStockItems.map(item => item.item).join(', ')} approaching minimum levels
                </p>
              </div>
            )}
          </div>
        )}

        {/* KPI Dashboard */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-blue-500">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-500 text-sm">Total Items</p>
                <p className="text-2xl font-bold text-gray-800">{inventoryData.length}</p>
              </div>
              <Package className="h-8 w-8 text-blue-500" />
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-red-500">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-500 text-sm">Critical Items</p>
                <p className="text-2xl font-bold text-red-600">{criticalItems.length}</p>
              </div>
              <AlertTriangle className="h-8 w-8 text-red-500" />
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-green-500">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-500 text-sm">Inventory Value</p>
                <p className="text-2xl font-bold text-gray-800">â‚¬{totalValue.toFixed(2)}</p>
              </div>
              <ShoppingCart className="h-8 w-8 text-green-500" />
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-purple-500">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-500 text-sm">Reorder Needed</p>
                <p className="text-2xl font-bold text-purple-600">{criticalItems.length + lowStockItems.length}</p>
              </div>
              <RefreshCw className="h-8 w-8 text-purple-500" />
            </div>
          </div>
        </div>

        {/* Current Stock Overview */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
          <h3 className="text-lg font-semibold mb-4 flex items-center">
            <Package className="mr-2 h-5 w-5 text-blue-500" />
            Current Stock Levels
          </h3>
          <div className="overflow-x-auto">
            <table className="w-full text-sm">
              <thead>
                <tr className="border-b-2">
                  <th className="text-left p-3">Item</th>
                  <th className="text-center p-3">Current Stock</th>
                  <th className="text-center p-3">Min Threshold</th>
                  <th className="text-center p-3">Weekly Usage</th>
                  <th className="text-center p-3">Weeks Remaining</th>
                  <th className="text-center p-3">Status</th>
                  <th className="text-center p-3">Action</th>
                </tr>
              </thead>
              <tbody>
                {inventoryData.map((item) => {
                  const status = getStockStatus(item);
                  const weeksRemaining = (item.currentStock / item.avgWeeklyUsage).toFixed(1);
                  
                  return (
                    <tr key={item.id} className="border-b hover:bg-gray-50">
                      <td className="p-3">
                        <div>
                          <p className="font-medium">{item.item}</p>
                          <p className="text-xs text-gray-500">{item.supplier}</p>
                        </div>
                      </td>
                      <td className="p-3 text-center">
                        <div className="font-semibold">{item.currentStock} {item.unit}</div>
                        <div className="w-full bg-gray-200 rounded-full h-2 mt-1">
                          <div 
                            className={`h-2 rounded-full ${status === 'critical' ? 'bg-red-500' : status === 'low' ? 'bg-yellow-500' : 'bg-green-500'}`}
                            style={{width: `${(item.currentStock / item.maxCapacity) * 100}%`}}
                          ></div>
                        </div>
                      </td>
                      <td className="p-3 text-center">{item.minThreshold} {item.unit}</td>
                      <td className="p-3 text-center">{item.avgWeeklyUsage} {item.unit}/week</td>
                      <td className="p-3 text-center">
                        <span className={weeksRemaining < 1 ? 'text-red-600 font-bold' : weeksRemaining < 2 ? 'text-yellow-600' : 'text-green-600'}>
                          {weeksRemaining} weeks
                        </span>
                      </td>
                      <td className="p-3 text-center">
                        <span className={`px-2 py-1 rounded-full text-xs border ${getStatusColor(status)}`}>
                          {status.toUpperCase()}
                        </span>
                      </td>
                      <td className="p-3 text-center">
                        {(status === 'critical' || status === 'low') && (
                          <button 
                            onClick={() => handleReorder(item)}
                            className="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded text-xs transition-colors"
                          >
                            Reorder
                          </button>
                        )}
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>

        {/* Usage Trends Chart */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
          <h3 className="text-lg font-semibold mb-4 flex items-center">
            <TrendingDown className="mr-2 h-5 w-5 text-purple-500" />
            Weekly Usage Trends
          </h3>
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={usageHistory}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="week" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Line type="monotone" dataKey="rice" stroke="#8884d8" strokeWidth={2} name="Rice (kg)" />
              <Line type="monotone" dataKey="chicken" stroke="#82ca9d" strokeWidth={2} name="Chicken (kg)" />
              <Line type="monotone" dataKey="tomatoes" stroke="#ffc658" strokeWidth={2} name="Tomatoes (kg)" />
              <Line type="monotone" dataKey="masala" stroke="#ff7300" strokeWidth={2} name="Masala (kg)" />
            </LineChart>
          </ResponsiveContainer>
        </div>

        {/* Reorder Recommendations */}
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h3 className="text-lg font-semibold mb-4 flex items-center">
            <RefreshCw className="mr-2 h-5 w-5 text-green-500" />
            Smart Reorder Recommendations
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {inventoryData.filter(item => getStockStatus(item) === 'critical' || getStockStatus(item) === 'low').map((item) => {
              const suggestion = generateReorderSuggestion(item);
              const estimatedCost = suggestion * item.costPerUnit;
              
              return (
                <div key={item.id} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="font-semibold">{item.item}</h4>
                    <span className={`px-2 py-1 rounded-full text-xs ${getStatusColor(getStockStatus(item))}`}>
                      {getStockStatus(item).toUpperCase()}
                    </span>
                  </div>
                  <p className="text-sm text-gray-600 mb-2">Current: {item.currentStock} {item.unit}</p>
                  <p className="text-sm text-blue-600 mb-2">Suggested order: {suggestion} {item.unit}</p>
                  <p className="text-sm text-gray-600 mb-3">Est. cost: â‚¬{estimatedCost.toFixed(2)}</p>
                  <button 
                    onClick={() => handleReorder(item)}
                    className="w-full bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded text-sm transition-colors"
                  >
                    Order Now
                  </button>
                </div>
              );
            })}
          </div>
        </div>

        {/* Reorder Modal */}
        {showReorderModal && selectedItem && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-xl p-6 max-w-md w-full mx-4">
              <h3 className="text-lg font-semibold mb-4">Reorder {selectedItem.item}</h3>
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Quantity to order ({selectedItem.unit})
                </label>
                <input
                  type="number"
                  value={reorderQuantity}
                  onChange={(e) => setReorderQuantity(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  min="1"
                  max={selectedItem.maxCapacity - selectedItem.currentStock}
                />
              </div>
              <div className="mb-4 text-sm text-gray-600">
                <p>Current stock: {selectedItem.currentStock} {selectedItem.unit}</p>
                <p>Estimated cost: â‚¬{(reorderQuantity * selectedItem.costPerUnit).toFixed(2)}</p>
                <p>Supplier: {selectedItem.supplier}</p>
              </div>
              <div className="flex gap-3">
                <button 
                  onClick={processReorder}
                  className="flex-1 bg-green-500 hover:bg-green-600 text-white py-2 px-4 rounded transition-colors"
                >
                  Confirm Order
                </button>
                <button 
                  onClick={() => setShowReorderModal(false)}
                  className="flex-1 bg-gray-500 hover:bg-gray-600 text-white py-2 px-4 rounded transition-colors"
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default InventoryManagement;
